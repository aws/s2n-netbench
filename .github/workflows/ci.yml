on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  merge_group:
    types: [checks_requested]
    branches: [main]

name: ci

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  RUST_BACKTRACE: 1
  # Pin the nightly toolchain to prevent breakage.
  # This should be occasionally updated.
  RUST_NIGHTLY_TOOLCHAIN: nightly-2023-12-04
  CDN: https://d37mm99fcr6hy4.cloudfront.net

# By default dependabot only receives read permissions. Explicitly give it write
# permissions which is needed by the ouzi-dev/commit-status-updater task.
#
# Updating status is relatively safe (doesn't modify source code) and caution
# should we taken before adding more permissions.
permissions:
  contents: read
  pull-requests: read
  statuses: write

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          profile: minimal
          override: true
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1.0.3
        with:
          command: fmt
          args: --all -- --check

  clippy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - toolchain: stable
            # fail on stable warnings
            args: "-D warnings"
          - toolchain: beta
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ matrix.toolchain }}
          profile: minimal
          override: true
          components: clippy

      - uses: camshaft/rust-cache@v1

      # TODO translate json reports to in-action warnings
      - name: Run cargo clippy
        uses: actions-rs/cargo@v1.0.3
        with:
          command: clippy
          # deriving Eq may break API compatibility so we disable it
          # See https://github.com/rust-lang/rust-clippy/issues/9063
          args: --all-features --all-targets -- -A clippy::derive_partial_eq_without_eq ${{ matrix.args }}

  udeps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          profile: minimal
          override: true

      - uses: camshaft/rust-cache@v1

      - uses: camshaft/install@v1
        with:
          crate: cargo-udeps

      - name: Run cargo udeps
        run: cargo udeps --workspace --all-targets
        env:
          RUSTC_WRAPPER: ""

  doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: camshaft/rust-cache@v1

      - name: Run cargo doc
        uses: actions-rs/cargo@v1.0.3
        with:
          command: doc
          args: --all-features --no-deps --workspace

      - uses: aws-actions/configure-aws-credentials@v4.0.1
        if: github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Upload to S3
        if: github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name
        id: s3
        run: |
          TARGET="${{ github.sha }}/doc"
          aws s3 sync target/doc "s3://netbenchrunnerlogs-public-prod/$TARGET" --acl private --follow-symlinks
          URL="$CDN/$TARGET/s2n_netbench/index.html"
          echo "URL=$URL" >> $GITHUB_OUTPUT

      - uses: ouzi-dev/commit-status-updater@v2.0.1
        if: github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name
        with:
          name: "doc / report"
          status: "success"
          url: "${{ steps.s3.outputs.URL }}"

  copyright:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check
        run: |
          ./scripts/copyright_check

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: stable
          override: true

      - uses: camshaft/rust-cache@v1

      - name: Run cargo build
        uses: actions-rs/cargo@v1.0.3
        with:
          command: build
          args: --tests

      - name: Run cargo test
        uses: actions-rs/cargo@v1.0.3
        with:
          command: test

  build:
    runs-on: ubuntu-latest
    outputs:
      scenarios: ${{ steps.scenarios.outputs.scenarios }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: stable
          override: true

      - uses: camshaft/rust-cache@v1

      - name: Run cargo build
        uses: actions-rs/cargo@v1.0.3
        with:
          command: build
          args: --profile=bench

      - name: Generate scenarios
        id: scenarios
        run: |
          ./target/release/s2n-netbench-scenarios \
            --request_response.response_size=8GiB

          SCENARIOS=$(find target/s2n-netbench -type f -exec basename -s .json {} \; | jq -Rcs 'rtrimstr("\n") | split("\n")')
          echo "scenarios=$SCENARIOS" >> $GITHUB_OUTPUT

      - name: Prepare artifact
        run: |
          mkdir -p artifact
          cp -r target/s2n-netbench artifact/scenarios
          cp target/release/s2n-netbench* artifact

      - uses: actions/upload-artifact@v3
        with:
          name: netbench
          path: artifact

  run-localhost:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        driver:
          - s2n-quic
          - native-tls
          - tcp
          - s2n-tls
        scenario: ${{ fromJson(needs.build.outputs.scenarios) }}
    env:
      SCENARIO: scenarios/${{ matrix.scenario }}.json

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: netbench
          path: .

      - name: Prepare artifact
        run: |
          chmod +x ./s2n-netbench*
          mkdir -p results/${{ matrix.scenario }}/${{ matrix.driver }}

      - name: Install bpftrace
        run: |
          sudo docker pull quay.io/iovisor/bpftrace:master-vanilla_llvm_clang_glibc2.27
          sudo docker run -v $(pwd):/output quay.io/iovisor/bpftrace:master-vanilla_llvm_clang_glibc2.27 \
            /bin/bash -c "cp /usr/bin/bpftrace /output"
          sudo chown root:root bpftrace
          sudo chmod +x bpftrace
          sudo mv bpftrace /usr/bin/

      - name: Setup environment
        run: |
          # set larger socket buffers
          sudo sysctl -w net.core.wmem_default=2000000
          sudo sysctl -w net.core.rmem_default=2000000

      - name: Run server
        run: |
          sudo SCENARIO=$SCENARIO ./s2n-netbench-collector \
            ./s2n-netbench-driver-server-${{ matrix.driver }} > results/${{ matrix.scenario }}/${{ matrix.driver }}/server.json &

      - name: Run client
        run: |
          export SERVER_0=localhost:4433
          sudo SCENARIO=$SCENARIO SERVER_0=$SERVER_0 ./s2n-netbench-collector \
            ./s2n-netbench-driver-client-${{ matrix.driver }} > results/${{ matrix.scenario }}/${{ matrix.driver }}/client.json

      - uses: actions/upload-artifact@v3
        with:
          name: results-${{ matrix.driver }}
          path: results

  report:
    runs-on: ubuntu-latest
    needs: [run-localhost]
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: .

      - name: Generate reports
        run: |
          chmod +x ./netbench/s2n-netbench*
          mkdir -p results
          cp -R results-*/* results/
          ./netbench/s2n-netbench report-tree results reports

      - uses: actions/upload-artifact@v3
        with:
          name: netbench-report
          path: reports

      - uses: aws-actions/configure-aws-credentials@v4.0.1
        if: github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Upload results
        if: github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name
        id: s3
        run: |
          TARGET="${{ github.sha }}/netbench"
          aws s3 sync reports "s3://netbenchrunnerlogs-public-prod/$TARGET" --acl private --follow-symlinks
          URL="$CDN/$TARGET/index.html"
          echo "URL=$URL" >> $GITHUB_OUTPUT

      - uses: ouzi-dev/commit-status-updater@v2.0.1
        if: github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name
        with:
          name: "netbench / report"
          status: "success"
          url: "${{ steps.s3.outputs.URL }}"

  # ensures there are no unused snapshots
  snapshots:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install cargo-insta
        uses: camshaft/install@v1
        with:
          crate: cargo-insta

      - uses: camshaft/rust-cache@v1

      - name: Run cargo insta test
        run: |
          cargo insta test --delete-unreferenced-snapshots

      - name: Check to make sure there are no unused snapshots
        run: |
          # If this fails, a test that was asserting a snapshot is no longer being executed.
          git diff --exit-code

  typos:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rs/toolchain@v1.0.7
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: camshaft/install@v1
        with:
          crate: typos-cli
          bins: typos

      - name: Run typos
        run: |
          ./scripts/typos --format json | tee /tmp/typos.json | jq -rs '.[] | "::error file=\(.path),line=\(.line_num),col=\(.byte_offset)::\(.typo) should be \"" + (.corrections // [] | join("\" or \"") + "\"")'
          cat /tmp/typos.json
          ! grep -q '[^[:space:]]' /tmp/typos.json

  deny:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: "Remove rust-toolchain"
        run: rm rust-toolchain

      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check --config .github/config/cargo-deny.toml
